// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/middleware/access-control/interface.go
//
// Generated by this command:
//
//	mockgen -source pkg/middleware/access-control/interface.go -destination pkg/mocks/access-control/mock_access_control.go
//
// Package mock_access_control is a generated GoMock package.
package mock_access_control

import (
	entity "quiz-app/pkg/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockreader is a mock of reader interface.
type Mockreader struct {
	ctrl     *gomock.Controller
	recorder *MockreaderMockRecorder
}

// MockreaderMockRecorder is the mock recorder for Mockreader.
type MockreaderMockRecorder struct {
	mock *Mockreader
}

// NewMockreader creates a new mock instance.
func NewMockreader(ctrl *gomock.Controller) *Mockreader {
	mock := &Mockreader{ctrl: ctrl}
	mock.recorder = &MockreaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockreader) EXPECT() *MockreaderMockRecorder {
	return m.recorder
}

// FindById mocks base method.
func (m *Mockreader) FindById(id int64) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockreaderMockRecorder) FindById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*Mockreader)(nil).FindById), id)
}

// Mockwriter is a mock of writer interface.
type Mockwriter struct {
	ctrl     *gomock.Controller
	recorder *MockwriterMockRecorder
}

// MockwriterMockRecorder is the mock recorder for Mockwriter.
type MockwriterMockRecorder struct {
	mock *Mockwriter
}

// NewMockwriter creates a new mock instance.
func NewMockwriter(ctrl *gomock.Controller) *Mockwriter {
	mock := &Mockwriter{ctrl: ctrl}
	mock.recorder = &MockwriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockwriter) EXPECT() *MockwriterMockRecorder {
	return m.recorder
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindById mocks base method.
func (m *MockRepository) FindById(id int64) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockRepositoryMockRecorder) FindById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockRepository)(nil).FindById), id)
}
